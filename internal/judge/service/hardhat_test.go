package service

import (
	"backend-go/internal/judge/model/request"
	"testing"
)

func TestHardhatSolidity(t *testing.T) {
	HardhatTestSolidity(request.ForgeTestReq{
		Code: "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n",
	}, "const {\n  time,\n  loadFixture,\n} = require(\"@nomicfoundation/hardhat-network-helpers\");\nconst { anyValue } = require(\"@nomicfoundation/hardhat-chai-matchers/withArgs\");\nconst { expect } = require(\"chai\");\n\ndescribe(\"Lock\", function () {\n  // We define a fixture to reuse the same setup in every test.\n  // We use loadFixture to run this setup once, snapshot that state,\n  // and reset Hardhat Network to that snapshot in every test.\n  async function deployOneYearLockFixture() {\n    const ONE_YEAR_IN_SECS = 365 * 24 * 60 * 60;\n    const ONE_GWEI = 1_000_000_000;\n\n    const lockedAmount = ONE_GWEI;\n    const unlockTime = (await time.latest()) + ONE_YEAR_IN_SECS;\n\n    // Contracts are deployed using the first signer/account by default\n    const [owner, otherAccount] = await ethers.getSigners();\n\n    const Lock = await ethers.getContractFactory(\"Lock\");\n    const lock = await Lock.deploy(unlockTime, { value: lockedAmount });\n\n    return { lock, unlockTime, lockedAmount, owner, otherAccount };\n  }\n\n  describe(\"Deployment\", function () {\n    it(\"Should set the right unlockTime\", async function () {\n      const { lock, unlockTime } = await loadFixture(deployOneYearLockFixture);\n\n      expect(await lock.unlockTime()).to.equal(unlockTime);\n    });\n\n    it(\"Should set the right owner\", async function () {\n      const { lock, owner } = await loadFixture(deployOneYearLockFixture);\n\n      expect(await lock.owner()).to.equal(owner.address);\n    });\n\n    it(\"Should receive and store the funds to lock\", async function () {\n      const { lock, lockedAmount } = await loadFixture(\n        deployOneYearLockFixture\n      );\n\n      expect(await ethers.provider.getBalance(lock.address)).to.equal(\n        lockedAmount\n      );\n    });\n\n    it(\"Should fail if the unlockTime is not in the future\", async function () {\n      // We don't use the fixture here because we want a different deployment\n      const latestTime = await time.latest();\n      const Lock = await ethers.getContractFactory(\"Lock\");\n      await expect(Lock.deploy(latestTime, { value: 1 })).to.be.revertedWith(\n        \"Unlock time should be in the future\"\n      );\n    });\n  });\n\n  describe(\"Withdrawals\", function () {\n    describe(\"Validations\", function () {\n      it(\"Should revert with the right error if called too soon\", async function () {\n        const { lock } = await loadFixture(deployOneYearLockFixture);\n\n        await expect(lock.withdraw()).to.be.revertedWith(\n          \"You can't withdraw yet\"\n        );\n      });\n\n      it(\"Should revert with the right error if called from another account\", async function () {\n        const { lock, unlockTime, otherAccount } = await loadFixture(\n          deployOneYearLockFixture\n        );\n\n        // We can increase the time in Hardhat Network\n        await time.increaseTo(unlockTime);\n\n        // We use lock.connect() to send a transaction from another account\n        await expect(lock.connect(otherAccount).withdraw()).to.be.revertedWith(\n          \"You aren't the owner\"\n        );\n      });\n\n      it(\"Shouldn't fail if the unlockTime has arrived and the owner calls it\", async function () {\n        const { lock, unlockTime } = await loadFixture(\n          deployOneYearLockFixture\n        );\n\n        // Transactions are sent using the first signer by default\n        await time.increaseTo(unlockTime);\n\n        await expect(lock.withdraw()).not.to.be.reverted;\n      });\n    });\n\n    describe(\"Events\", function () {\n      it(\"Should emit an event on withdrawals\", async function () {\n        const { lock, unlockTime, lockedAmount } = await loadFixture(\n          deployOneYearLockFixture\n        );\n\n        await time.increaseTo(unlockTime);\n\n        await expect(lock.withdraw())\n          .to.emit(lock, \"Withdrawal\")\n          .withArgs(lockedAmount, anyValue); // We accept any value as `when` arg\n      });\n    });\n\n    describe(\"Transfers\", function () {\n      it(\"Should transfer the funds to the owner\", async function () {\n        const { lock, unlockTime, lockedAmount, owner } = await loadFixture(\n          deployOneYearLockFixture\n        );\n\n        await time.increaseTo(unlockTime);\n\n        await expect(lock.withdraw()).to.changeEtherBalances(\n          [owner, lock],\n          [lockedAmount, -lockedAmount]\n        );\n      });\n    });\n  });\n});\n")
}
